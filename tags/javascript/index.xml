<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on けにぶろぐ</title>
    <link>https://mtside01.github.io/kennyblog/tags/javascript/</link>
    <description>Recent content in JavaScript on けにぶろぐ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 11 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://mtside01.github.io/kennyblog/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>サバイバルTypeScript勉強備忘録6（TypeScriptの変数、オブジェクト、配列、型定義）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-07-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B26/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-07-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B26/</guid>
      <description>目次  目次 1. 概要 2. 変数  2.1. 変数宣言の型注釈 2.2. 変数を読み取り専用にする（readonlyプロパティ）  2.2.1. 基本的な書き方 2.2.2. readonlyは再帰的ではない 2.2.3. 一括して読み取り専用にしたい場合     3. オブジェクト  3.1. オブジェクトリテラル 3.2. メソッドの型注釈 3.3. オブジェクトの分割代入 3.4. オプショナルチェーン   4. 配列  4.1. 配列の型注釈 4.2. 読み取り専用の配列 4.3. 配列の分割代入 4.4. 配列のスプレッド構文   5. 型定義  5.1. 列挙型(enum) 5.2. ユニオン型 5.3. インターセクション型 5.4. 型エイリアス 5.5. typeof演算子   6. おわりに 7. 参考  　1.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録5（ESLintでのTypeScriptコーディング規約チェック）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-06-16_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B25/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-06-16_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B25/</guid>
      <description>目次  目次 1. 概要 2. 環境構築  2.1. プロジェクト作成 2.2. TypeScriptの導入 2.3. TypeScriptファイルの作成   3. TypeScriptにESLintを導入する  3.1. 導入コマンド実行 3.2. TypeScript向けshareable configを導入する 3.3. TypeScript ESLint設定ファイルの作成  3.3.1. tsconfig.eslint.jsonの作成 3.3.2. .eslintrc.jsの作成     4. TypeScriptをチェックする  4.1. コード記載 4.2. ESLint実行 4.3. 指摘内容の修正   5. VS Code用ESLint Extensionの導入 6. おわりに 7. 参考  　1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に、TypeScriptのコーディング規約チェックについて学んでいきます。
　2. 環境構築 2.1. プロジェクト作成 適当なディレクトリを作成し、package.jsonを作成、最低限の内容を記載しておきます。
{  &amp;#34;name&amp;#34;: &amp;#34;eslint-typescript-tutorial&amp;#34;,  &amp;#34;license&amp;#34;: &amp;#34;UNLICENSED&amp;#34;, } 2.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録4（ESLintでのJavaScriptコーディング規約チェック）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-06-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B24/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-06-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B24/</guid>
      <description>目次  目次 1. 概要 2. 背景知識  2.1. コーディング規約で書き方を統一する 2.2. コーディング規約の問題点 2.3. コーディング規約の自動化（ESLint） 2.4. リンターについて  2.4.1. コンパイラとリンターの違い 2.4.2. TypeScriptコンパイラとESLintの違い     3. ESLintでJavaScriptをリントする  3.1. プロジェクト作成 3.2. ESLintの導入 3.3. ESLintの設定ファイル作成 3.4. ESLintのルールを設定する 3.5. チェックする 3.6. Shareable Configの導入 3.7. ルールを部分的に無効化したい場合   4. おわりに 5. 参考  　1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に、JavaScript/TypeScriptのコーディング規約チェックについて学んでいきます。
　2. 背景知識 2.1. コーディング規約で書き方を統一する プログラムを共同で開発する場合、人によって書き方が異なると可読性や保守性の低下を引き起こす可能性があります。 そういった不都合を解消するための書き方のルールを「コーディング規約(coding standards)」と呼びます。
コーディング規約を一から作るのは大変なので、多くの場合、公開されているものを利用します。JavaScriptにおける代表的なものには以下があります。
 Google JavaScript Style Guide JavaScript Standard Style Airbnb JavaScript Style Guide  2.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録3（Reactでいいねボタンを作る）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-30_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B23/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-30_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B23/</guid>
      <description>目次  目次 1. 概要 2. 題材：Reactでいいねボタンを作る 3. 環境構築  3.1. Yarnのインストール 3.2. その他インストールが必要なもの 3.3. プロジェクト作成 3.4. 開発サーバ起動確認   4. コーディング  4.1. 作ったコード全体  4.1.1. App.tsx   4.2. App.tsxを変更する 4.3. LikeButton関数/タグを用意する 4.4. React useState関数を使ってボタンのカウントを制御する 4.5. onClick属性からcount stateの更新を行う 4.6. cssの設定 4.7. 動作確認   5. おわりに 6. 参考  　1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に、TypeScriptでのApp実装を行います。
　2. 題材：Reactでいいねボタンを作る 第三章 作って学ぶTypeScriptのReactでいいねボタンを作ろうに従い、Appを作っていきます。
　3. 環境構築 3.1. Yarnのインストール パッケージ管理ツールYarnを導入します。グローバル環境にインストールしておきます。
npm install -g yarn 3.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録2（環境構築とコンパイル）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-28_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B22/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-28_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B22/</guid>
      <description>目次  目次 1. 概要 2. 開発環境の準備  2.1. Node.jsのインストール 2.2. TypeScriptコンパイラのインストール  2.2.1. トラブルシュート     3. 簡単な関数を作ってみる  3.1. JavaScriptで型が無くて困る例 3.2. TypeScriptを導入して型を追加する   4. おわりに 5. 参考   1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に学んだ内容を記載します。
　2. 開発環境の準備 2.1. Node.jsのインストール 私の環境では既にnodeをインストール済みなので省略します。 まだの方は以下などを参考にして下さい。
https://qiita.com/echolimitless/items/83f8658cf855de04b9ce
2.2. TypeScriptコンパイラのインストール 以下コマンドでインストールします。
npm install -g typescript ※ -gコマンドでグローバル環境にインストールしています。
以下コマンドでバージョン表示されればOK
tsc -v 2.2.1. トラブルシュート PowerShellの実行ポリシーがRestricted状態だったので、怒られてしまった。（Vue環境構築以来2回目）
以下コマンドで現在のユーザの実行ポリシーをRemoteSignedに変更しました。
 Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser ※ 詳しくは以下を参照</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録1（TypeScriptの概要）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-22_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B21/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-22_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B21/</guid>
      <description>目次  目次 1. 概要 2. TypeScriptの特徴 3. TypeScriptを使う利点  3.1. 大規模開発に適している 3.2. JavaScriptの知識があれば使い始められる 3.3. 古いJavaScript環境を対象とした開発シーンでも最新の構文が使える 3.4. 利用者人口の多いAltJS言語である   4. 静的型付けと動的型付けの違い 5. TypeScriptを採用できる範囲 6. おわりに 7. 参考  　1. 概要 これまでこのブログでは、JavaScriptを利用したWeb Appをいくつか作ってきていますが、 動作確認時、型が使えないことに起因する代入バグで困ることが何度もありました。
その解決として、今後はTypeScriptを勉強/導入しようと考えています。 まずは入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載していこうと思います。
今回の記事では、第2章 TypeScriptのあらましについて勉強した内容を記載します。
　2. TypeScriptの特徴  JavaScriptに型が追加されたもの  型があることでコンパイル時に様々な問題を発見可能 エディタの恩恵により、コーディング中の型チェックなども可能   TypeScriptで書かれたコードはJavaScriptにコンパイル（トランスパイル）される JavaScriptに互換性があり、JavaScriptが実行できるすべてのブラウザ、コンピュータ、OSで動作可能  拡張部分は主に型に関するものであり、その他の殆どの文法はJavaScriptに由来する TypeScriptを導入したとしても、既存のJavaScript資産はそのまま活用可能   オープンソース  　3. TypeScriptを使う利点 3.1. 大規模開発に適している 大規模アプリケーション開発に求められる以下の三大特徴をTypeScriptは備えている
 型による静的チェック モジュール性 緩やかな学習コスト  3.2. JavaScriptの知識があれば使い始められる TypeScriptはJavaScriptの仕様はそのままに、TypeScriptの機能/利点を追加している。</description>
    </item>
    
    <item>
      <title>VueプロジェクトをGitHub Pagesに公開する</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-15_vue%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92github-pages%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-15_vue%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92github-pages%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</guid>
      <description>目次  目次 1. 概要 2. Vueのインストール  2.1. Node.jsインストール 2.2. Vue CLIのインストール 2.3. Vue CLIバージョンの確認  2.3.1. トラブルシュート     3. Vueプロジェクトの生成と実行  3.1. Vueプロジェクトの作成 3.2. Vueプロジェクトの実行   4. GitHub Pagesへの公開  4.1. リポジトリの作成 4.2. 作成内容のcommit/push 4.3. GitHub Pagesへの公開設定  4.3.1. gh-pagesの導入 4.3.2. package.jsonの変更 4.3.3. index.htmlの変更 4.3.4. build/deployの実施 4.3.5. GitHub上での確認     5. おわりに 6. 参考  　1. 概要 これまでこのブログでは、CDNでVue.jsを導入することで機能をちょい足しするような使い方をしてきました。
しかし、より本格的（画面を複数のコンポーネントで構成、画面遷移を行う等）なWeb Appを作る場合、Vue CLI経由でVue.jsプロジェクトの生成/ビルド/デプロイ作業が必要となってきます。</description>
    </item>
    
    <item>
      <title>JavaScriptを使ったローカルファイルアクセス</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-01_javascript%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-01_javascript%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</guid>
      <description>1. 概要 今回は、JavaScriptを使ったローカルファイルの読み出し/書き込み方法を調べてみました。
2. 作ったもの 2.1. デモアプリ https://mtside01.github.io/FileAccess_sample/
検証のために作ったデモアプリを上記で公開しています。
機能としては、以下を試せます。
 ローカルファイルの読み込み 読み込んだファイルから情報取得 入力した文字列をテキストファイルとして書き出し  2.2. ソースコード https://github.com/mtside01/FileAccess_sample
　3. ポイント（備忘録） 3.1. ローカルファイル読み込み 3.1.1. 読み込み用要素の追加 HTML inputタグを使い、typeをfile指定することでローカルファイルを読み込むことが出来ます。
今回はシンプルに以下のように記載しています。
&amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;uploadFile&amp;#34;&amp;gt; 3.1.2. ファイル読み込みをトリガーにファイル情報取得を行う fileInputという変数を用意し、上記id=&amp;quot;uploadFile&amp;quot;を参照して要素取得を行います。
また、ファイル読み込み時をトリガーにJavaScript関数実行を行いたいため、onchangeイベントを使用しています。
let fileInput = document.getElementById(&amp;#34;uploadFile&amp;#34;); let fileReader = new FileReader(); let fileOutput = document.getElementById(&amp;#34;downloadButton&amp;#34;);  fileInput.onchange = () =&amp;gt; {  let file = fileInput.files[0];  let pathToFile = document.getElementById(&amp;#34;pathToFile&amp;#34;);  let fileName = document.getElementById(&amp;#34;fileName&amp;#34;);  let fileSize = document.</description>
    </item>
    
    <item>
      <title>Among Us Map App</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-04-17_among-us-map-app/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-04-17_among-us-map-app/</guid>
      <description>目次  目次 1. 作ったもの  1.1. デモ 1.2. ソースコード   2. ポイント（備忘録）  2.1. CDNでBootstrapを導入 2.2. Bootstrap Iconsの導入 2.3. 各メニューアイコン色をマウスオーバーに応じて変更する 2.4. メニューボタンのクリックに応じて画面に表示する画像を切り替える 2.5. ハンバーガーメニューのクリックに応じてメニュー一覧の表示/非表示を切り替える   3. 感想  　1. 作ったもの 1.1. デモ https://mtside01.github.io/AmongUsMap/
上記で公開しています。
Among Usというゲーム用のMapを表示するAppです。（2022/04/17時点で使用可能な全マップ対応）
ちなみにAmong Usとは宇宙空間で行う人狼ゲームのようなもので、僕はここ１年くらいハマっており月１、２回のペースで学生時代の友人と遊んでいます。
http://www.h2int.com/games/among-us/
ゲーム内での自身の行動をメンバに情報共有するために、マップを手元に開いておくことがほぼ必須となるのですが、 いちいち画像検索したりするのが手間だったのでワンクリックでマップを表示できるアプリを作ってみました。
1.2. ソースコード https://github.com/mtside01/AmongUsMap
　2. ポイント（備忘録） 2.1. CDNでBootstrapを導入 僕のブログではおなじみの作業です。
今回のAppではBootstrap Icons、flex-row/flex-columnクラスを使用したかったので導入しています。
&amp;lt;head&amp;gt;  &amp;lt;!-- Required meta tags --&amp;gt;  &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt;  &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue.jsで作る西暦/和暦および日時表示App</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-04-09_vue.js%E3%81%A7%E4%BD%9C%E3%82%8B%E8%A5%BF%E6%9A%A6%E5%92%8C%E6%9A%A6%E3%81%8A%E3%82%88%E3%81%B3%E6%97%A5%E6%99%82%E8%A1%A8%E7%A4%BAapp/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-04-09_vue.js%E3%81%A7%E4%BD%9C%E3%82%8B%E8%A5%BF%E6%9A%A6%E5%92%8C%E6%9A%A6%E3%81%8A%E3%82%88%E3%81%B3%E6%97%A5%E6%99%82%E8%A1%A8%E7%A4%BAapp/</guid>
      <description>目次  目次 1. 作ったもの  1.1. デモ 1.2. ソースコード   2. ポイント（備忘録）  2.1. CDNでのVue.js導入 2.2. HTML要素とVueインスタンスを連動させる  2.2.1. HTML要素に記載したidとVueインスタンスのel（エレメント）オプションを紐づける 2.2.2. マスタッシュ構文を使ってVueで定義したdata変数を埋め込む   2.3. Vue mountedを使用して、DOM生成後をトリガーに関数を実行する 2.4. スマホ用のサイズ調整   3. 感想・改善したい点 4. 参考  　1. 作ったもの 1.1. デモ https://mtside01.github.io/VueClock/
上記で公開しています。
現在の西暦/和暦と日時を表示します。
最近よく署名等で令和何年かを書かされることが多いのですが、 いつも分からなくなるのでスマホのホーム画面にAppとして置いておきたくて作りました。
1.2. ソースコード https://github.com/mtside01/VueClock
　2. ポイント（備忘録） 2.1. CDNでのVue.js導入 CDNを使ってサクッとVue.jsを使えるようにします。 Body内に以下を記載するだけです。
&amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; ※ 最新版は以下公式ページを確認
https://jp.vuejs.org/v2/guide/installation.html
　2.2. HTML要素とVueインスタンスを連動させる 2.2.1. HTML要素に記載したidとVueインスタンスのel（エレメント）オプションを紐づける これを行うことで、id指定した要素内でVueが扱えるようになります。
以下のように&amp;quot;app&amp;quot;/&amp;quot;#app&amp;quot;を指定することで紐づけています。</description>
    </item>
    
    <item>
      <title>ブルースのコード進行を表示するAppを作った話</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-03-27_%E3%83%96%E3%83%AB%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E9%80%B2%E8%A1%8C%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8Bapp%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-03-27_%E3%83%96%E3%83%AB%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E9%80%B2%E8%A1%8C%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8Bapp%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E8%A9%B1/</guid>
      <description>0. 目次  0. 目次 1. 作ったもの  1.1. デモ 1.2. ソースコード   2. ポイント（備忘録）  2.1. 複数のHTML要素に同一の名前を与えて一括変更する  2.1.1. 複数のHTML要素に同一の名前を与える 2.1.2. プルダウンメニューの変更に応じて表示更新用JavaScript関数を呼び出し 2.1.3. HTML要素の更新   2.2. CDNを使ったBootstrapの簡易導入   3. 感想・改善したい点  　1. 作ったもの 1.1. デモ https://mtside01.github.io/BluesCode/
上記で公開しています。
プルダウンメニューから選んだKeyに対応した、ブルースコード進行を表示してくれます。
最近ブルースギターを練習する機会が多く、セッションの時にこういうのがあったら便利だなと思って作ってみました。
1.2. ソースコード https://github.com/mtside01/BluesCode 　2. ポイント（備忘録） 2.1. 複数のHTML要素に同一の名前を与えて一括変更する デモサイトを見て頂ければなんとなくわかると思いますが、 ブルース進行は基本的に3つのコードのみで構成されます。 （トニック、サブドミナント、ドミナントとか言いますが音楽サイトではないので詳細は割愛します。）
それらを表示している要素を、プルダウンメニューに応じて同時に操作したかったため、 今回は以下の手順で実現しています。
2.1.1. 複数のHTML要素に同一の名前を与える 以下あたりがわかりやすいでしょうか？
name=&amp;quot;subDominant&amp;quot;およびname=&amp;quot;root&amp;quot;を与えている要素が複数あることが見て取れると思います。
&amp;lt;form class=&amp;#34;row g-3&amp;#34;&amp;gt;  &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt;  &amp;lt;h3 name=&amp;#34;subDominant&amp;#34;&amp;gt;D7&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt;  &amp;lt;h3 style=&amp;#34;text-align: right&amp;#34;&amp;gt;|&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt;  &amp;lt;h3 name=&amp;#34;subDominant&amp;#34;&amp;gt;D7&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt;  &amp;lt;h3 style=&amp;#34;text-align: right&amp;#34;&amp;gt;|&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt;  &amp;lt;h3 name=&amp;#34;root&amp;#34;&amp;gt;A7&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt;  &amp;lt;h3 style=&amp;#34;text-align: right&amp;#34;&amp;gt;|&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt;  &amp;lt;h3 name=&amp;#34;root&amp;#34;&amp;gt;A7&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; 2.</description>
    </item>
    
  </channel>
</rss>
