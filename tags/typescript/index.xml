<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on けにぶろぐ</title>
    <link>https://mtside01.github.io/kennyblog/tags/typescript/</link>
    <description>Recent content in TypeScript on けにぶろぐ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 11 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://mtside01.github.io/kennyblog/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>サバイバルTypeScript勉強備忘録6（TypeScriptの変数、オブジェクト、配列、型定義）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-07-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B26/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-07-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B26/</guid>
      <description>目次  目次 1. 概要 2. 変数  2.1. 変数宣言の型注釈 2.2. 変数を読み取り専用にする（readonlyプロパティ）  2.2.1. 基本的な書き方 2.2.2. readonlyは再帰的ではない 2.2.3. 一括して読み取り専用にしたい場合     3. オブジェクト  3.1. オブジェクトリテラル 3.2. メソッドの型注釈 3.3. オブジェクトの分割代入 3.4. オプショナルチェーン   4. 配列  4.1. 配列の型注釈 4.2. 読み取り専用の配列 4.3. 配列の分割代入 4.4. 配列のスプレッド構文   5. 型定義  5.1. 列挙型(enum) 5.2. ユニオン型 5.3. インターセクション型 5.4. 型エイリアス 5.5. typeof演算子   6. おわりに 7. 参考  　1.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録5（ESLintでのTypeScriptコーディング規約チェック）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-06-16_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B25/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-06-16_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B25/</guid>
      <description>目次  目次 1. 概要 2. 環境構築  2.1. プロジェクト作成 2.2. TypeScriptの導入 2.3. TypeScriptファイルの作成   3. TypeScriptにESLintを導入する  3.1. 導入コマンド実行 3.2. TypeScript向けshareable configを導入する 3.3. TypeScript ESLint設定ファイルの作成  3.3.1. tsconfig.eslint.jsonの作成 3.3.2. .eslintrc.jsの作成     4. TypeScriptをチェックする  4.1. コード記載 4.2. ESLint実行 4.3. 指摘内容の修正   5. VS Code用ESLint Extensionの導入 6. おわりに 7. 参考  　1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に、TypeScriptのコーディング規約チェックについて学んでいきます。
　2. 環境構築 2.1. プロジェクト作成 適当なディレクトリを作成し、package.jsonを作成、最低限の内容を記載しておきます。
{  &amp;#34;name&amp;#34;: &amp;#34;eslint-typescript-tutorial&amp;#34;,  &amp;#34;license&amp;#34;: &amp;#34;UNLICENSED&amp;#34;, } 2.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録4（ESLintでのJavaScriptコーディング規約チェック）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-06-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B24/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-06-11_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B24/</guid>
      <description>目次  目次 1. 概要 2. 背景知識  2.1. コーディング規約で書き方を統一する 2.2. コーディング規約の問題点 2.3. コーディング規約の自動化（ESLint） 2.4. リンターについて  2.4.1. コンパイラとリンターの違い 2.4.2. TypeScriptコンパイラとESLintの違い     3. ESLintでJavaScriptをリントする  3.1. プロジェクト作成 3.2. ESLintの導入 3.3. ESLintの設定ファイル作成 3.4. ESLintのルールを設定する 3.5. チェックする 3.6. Shareable Configの導入 3.7. ルールを部分的に無効化したい場合   4. おわりに 5. 参考  　1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に、JavaScript/TypeScriptのコーディング規約チェックについて学んでいきます。
　2. 背景知識 2.1. コーディング規約で書き方を統一する プログラムを共同で開発する場合、人によって書き方が異なると可読性や保守性の低下を引き起こす可能性があります。 そういった不都合を解消するための書き方のルールを「コーディング規約(coding standards)」と呼びます。
コーディング規約を一から作るのは大変なので、多くの場合、公開されているものを利用します。JavaScriptにおける代表的なものには以下があります。
 Google JavaScript Style Guide JavaScript Standard Style Airbnb JavaScript Style Guide  2.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録3（Reactでいいねボタンを作る）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-30_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B23/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-30_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B23/</guid>
      <description>目次  目次 1. 概要 2. 題材：Reactでいいねボタンを作る 3. 環境構築  3.1. Yarnのインストール 3.2. その他インストールが必要なもの 3.3. プロジェクト作成 3.4. 開発サーバ起動確認   4. コーディング  4.1. 作ったコード全体  4.1.1. App.tsx   4.2. App.tsxを変更する 4.3. LikeButton関数/タグを用意する 4.4. React useState関数を使ってボタンのカウントを制御する 4.5. onClick属性からcount stateの更新を行う 4.6. cssの設定 4.7. 動作確認   5. おわりに 6. 参考  　1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に、TypeScriptでのApp実装を行います。
　2. 題材：Reactでいいねボタンを作る 第三章 作って学ぶTypeScriptのReactでいいねボタンを作ろうに従い、Appを作っていきます。
　3. 環境構築 3.1. Yarnのインストール パッケージ管理ツールYarnを導入します。グローバル環境にインストールしておきます。
npm install -g yarn 3.</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録2（環境構築とコンパイル）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-28_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B22/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-28_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B22/</guid>
      <description>目次  目次 1. 概要 2. 開発環境の準備  2.1. Node.jsのインストール 2.2. TypeScriptコンパイラのインストール  2.2.1. トラブルシュート     3. 簡単な関数を作ってみる  3.1. JavaScriptで型が無くて困る例 3.2. TypeScriptを導入して型を追加する   4. おわりに 5. 参考   1. 概要 このシリーズでは、TypeScriptの入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載しています。
今回の記事では、第三章 作って学ぶTypeScriptを題材に学んだ内容を記載します。
　2. 開発環境の準備 2.1. Node.jsのインストール 私の環境では既にnodeをインストール済みなので省略します。 まだの方は以下などを参考にして下さい。
https://qiita.com/echolimitless/items/83f8658cf855de04b9ce
2.2. TypeScriptコンパイラのインストール 以下コマンドでインストールします。
npm install -g typescript ※ -gコマンドでグローバル環境にインストールしています。
以下コマンドでバージョン表示されればOK
tsc -v 2.2.1. トラブルシュート PowerShellの実行ポリシーがRestricted状態だったので、怒られてしまった。（Vue環境構築以来2回目）
以下コマンドで現在のユーザの実行ポリシーをRemoteSignedに変更しました。
 Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser ※ 詳しくは以下を参照</description>
    </item>
    
    <item>
      <title>サバイバルTypeScript勉強備忘録1（TypeScriptの概要）</title>
      <link>https://mtside01.github.io/kennyblog/posts/2022-05-22_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B21/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mtside01.github.io/kennyblog/posts/2022-05-22_%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABtypescript%E5%8B%89%E5%BC%B7%E5%82%99%E5%BF%98%E9%8C%B21/</guid>
      <description>目次  目次 1. 概要 2. TypeScriptの特徴 3. TypeScriptを使う利点  3.1. 大規模開発に適している 3.2. JavaScriptの知識があれば使い始められる 3.3. 古いJavaScript環境を対象とした開発シーンでも最新の構文が使える 3.4. 利用者人口の多いAltJS言語である   4. 静的型付けと動的型付けの違い 5. TypeScriptを採用できる範囲 6. おわりに 7. 参考  　1. 概要 これまでこのブログでは、JavaScriptを利用したWeb Appをいくつか作ってきていますが、 動作確認時、型が使えないことに起因する代入バグで困ることが何度もありました。
その解決として、今後はTypeScriptを勉強/導入しようと考えています。 まずは入門教材としてサバイバルTypeScriptで学習し、個人的に重要だと思った箇所を備忘録として記事に記載していこうと思います。
今回の記事では、第2章 TypeScriptのあらましについて勉強した内容を記載します。
　2. TypeScriptの特徴  JavaScriptに型が追加されたもの  型があることでコンパイル時に様々な問題を発見可能 エディタの恩恵により、コーディング中の型チェックなども可能   TypeScriptで書かれたコードはJavaScriptにコンパイル（トランスパイル）される JavaScriptに互換性があり、JavaScriptが実行できるすべてのブラウザ、コンピュータ、OSで動作可能  拡張部分は主に型に関するものであり、その他の殆どの文法はJavaScriptに由来する TypeScriptを導入したとしても、既存のJavaScript資産はそのまま活用可能   オープンソース  　3. TypeScriptを使う利点 3.1. 大規模開発に適している 大規模アプリケーション開発に求められる以下の三大特徴をTypeScriptは備えている
 型による静的チェック モジュール性 緩やかな学習コスト  3.2. JavaScriptの知識があれば使い始められる TypeScriptはJavaScriptの仕様はそのままに、TypeScriptの機能/利点を追加している。</description>
    </item>
    
  </channel>
</rss>
